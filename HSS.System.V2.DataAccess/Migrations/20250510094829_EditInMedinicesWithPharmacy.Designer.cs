// <auto-generated />
using System;
using HSS.System.V2.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HSS.System.V2.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250510094829_EditInMedinicesWithPharmacy")]
    partial class EditInMedinicesWithPharmacy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("ActualDuration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ActualStartAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<TimeSpan>("ExpectedDuration")
                        .HasColumnType("time");

                    b.Property<string>("PatientNationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SchaudleStartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("SystemQueueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SystemQueueId");

                    b.HasIndex("TicketId");

                    b.ToTable("Appointments");

                    b.HasDiscriminator().HasValue("Appointment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Common.LoginActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LoginActivities");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Clinic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentWorkingDoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShifts")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PeriodPerAppointment")
                        .HasColumnType("time");

                    b.Property<string>("QueueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkingDoctorId")
                        .IsUnique()
                        .HasFilter("[CurrentWorkingDoctorId] IS NOT NULL");

                    b.HasIndex("HospitalId");

                    b.HasIndex("QueueId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Hospital", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.MedicalLab", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentWorkingTesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShifts")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PeriodPerAppointment")
                        .HasColumnType("time");

                    b.Property<string>("QueueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkingTesterId")
                        .IsUnique()
                        .HasFilter("[CurrentWorkingTesterId] IS NOT NULL");

                    b.HasIndex("HospitalId");

                    b.HasIndex("QueueId");

                    b.ToTable("MedicalLabs");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Pharmacy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShifts")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.RadiologyCenter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentWorkingTesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShifts")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PeriodPerAppointment")
                        .HasColumnType("time");

                    b.Property<string>("QueueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkingTesterId")
                        .IsUnique()
                        .HasFilter("[CurrentWorkingTesterId] IS NOT NULL");

                    b.HasIndex("HospitalId");

                    b.HasIndex("QueueId");

                    b.ToTable("RadiologyCenters");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Reception", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfShifts")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Disease", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Medicine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.MedicinePharmacy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("MedicinePharmacies");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Test", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<double>("EstimatedDurationInMinutes")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TestPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasDiscriminator().HasValue("Test");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.TestRequired", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicAppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientNationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClinicAppointmentId");

                    b.HasIndex("TestId");

                    b.ToTable("TestsRequired");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthOfDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Employees");

                    b.HasDiscriminator().HasValue("Employee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthOfDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.Prescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicAppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicAppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.PrescriptionMedicineItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedicineItems");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.Ticket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstClinicAppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FirstClinicAppointmentId")
                        .IsUnique()
                        .HasFilter("[FirstClinicAppointmentId] IS NOT NULL");

                    b.HasIndex("PatientId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.SystemQueue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<TimeSpan>("PeriodPerAppointment")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemQueues");

                    b.HasDiscriminator().HasValue("SystemQueue");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MedicalLabMedicalLabTest", b =>
                {
                    b.Property<string>("MedicalLabsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicalLabsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("MedicalLabMedicalLabTest");
                });

            modelBuilder.Entity("RadiologyCenterRadiologyTest", b =>
                {
                    b.Property<string>("RadiologyCentersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RadiologyCentersId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("RadiologyCenterRadiologyTest");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.ClinicAppointment", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Appointments.Appointment");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PreExamiationClinicAppointemntId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrescriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QueueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReExamiationClinicAppointemntId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ReExaminationNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PreExamiationClinicAppointemntId")
                        .IsUnique()
                        .HasFilter("[PreExamiationClinicAppointemntId] IS NOT NULL");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("QueueId");

                    b.HasIndex("ReExamiationClinicAppointemntId")
                        .IsUnique()
                        .HasFilter("[ReExamiationClinicAppointemntId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ClinicAppointment");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.MedicalLabAppointment", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Appointments.Appointment");

                    b.Property<string>("ClinicAppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MedicalLabAppointmentState")
                        .HasColumnType("int");

                    b.Property<string>("MedicalLabId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QueueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReceiveResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ClinicAppointmentId");

                    b.HasIndex("MedicalLabId");

                    b.HasIndex("QueueId");

                    b.HasIndex("TesterId");

                    b.ToTable("Appointments", t =>
                        {
                            t.Property("QueueId")
                                .HasColumnName("MedicalLabAppointment_QueueId");

                            t.Property("Result")
                                .HasColumnName("MedicalLabAppointment_Result");
                        });

                    b.HasDiscriminator().HasValue("MedicalLabAppointment");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.RadiologyCeneterAppointment", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Appointments.Appointment");

                    b.Property<string>("ClinicAppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QueueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RadiologyCeneterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ClinicAppointmentId");

                    b.HasIndex("QueueId");

                    b.HasIndex("RadiologyCeneterId");

                    b.HasIndex("TestId");

                    b.HasIndex("TesterId");

                    b.ToTable("Appointments", t =>
                        {
                            t.Property("ClinicAppointmentId")
                                .HasColumnName("RadiologyCeneterAppointment_ClinicAppointmentId");

                            t.Property("QueueId")
                                .HasColumnName("RadiologyCeneterAppointment_QueueId");

                            t.Property("Result")
                                .HasColumnName("RadiologyCeneterAppointment_Result");

                            t.Property("TestId")
                                .HasColumnName("RadiologyCeneterAppointment_TestId");

                            t.Property("TesterId")
                                .HasColumnName("RadiologyCeneterAppointment_TesterId");
                        });

                    b.HasDiscriminator().HasValue("RadiologyCeneterAppointment");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.MedicalLabTest", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Medical.Test");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MedicalLabTest");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.RadiologyTest", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Medical.Test");

                    b.Property<string>("BodyPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparationInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiresContrast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RadiologyTest");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Doctor", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.People.Employee");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ClinicId");

                    b.HasIndex("SpecializationId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.MedicalLabTester", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.People.Employee");

                    b.Property<string>("MedicalLabId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalLabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MedicalLabId");

                    b.HasDiscriminator().HasValue("MedicalLabTester");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Pharmacist", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.People.Employee");

                    b.Property<string>("PharmacyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PharmacyId");

                    b.HasDiscriminator().HasValue("Pharmacist");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.RadiologyTester", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.People.Employee");

                    b.Property<string>("RadiologyCenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RadiologyCenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RadiologyCenterId");

                    b.HasDiscriminator().HasValue("RadiologyTester");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Receptionist", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.People.Employee");

                    b.Property<string>("ReceptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ReceptionId");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.ClinicQueue", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Queues.SystemQueue");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ClinicId");

                    b.HasDiscriminator().HasValue("ClinicQueue");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.MedicalLabQueue", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Queues.SystemQueue");

                    b.Property<string>("MedicalLabId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("MedicalLabId");

                    b.HasDiscriminator().HasValue("MedicalLabQueue");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.RadiologyCenterQueue", b =>
                {
                    b.HasBaseType("HSS.System.V2.Domain.Queues.SystemQueue");

                    b.Property<string>("RadiologyCenterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RadiologyCenterId");

                    b.HasDiscriminator().HasValue("RadiologyCenterQueue");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Queues.SystemQueue", null)
                        .WithMany("Appointments")
                        .HasForeignKey("SystemQueueId");

                    b.HasOne("HSS.System.V2.Domain.Prescriptions.Ticket", "Ticket")
                        .WithMany("Appointments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Common.LoginActivity", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.People.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Clinic", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.People.Doctor", "CurrentWorkingDoctor")
                        .WithOne()
                        .HasForeignKey("HSS.System.V2.Domain.Facilities.Clinic", "CurrentWorkingDoctorId");

                    b.HasOne("HSS.System.V2.Domain.Facilities.Hospital", "Hospital")
                        .WithMany("Clinics")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Queues.ClinicQueue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.Specialization", "Specialization")
                        .WithMany("Clinics")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentWorkingDoctor");

                    b.Navigation("Hospital");

                    b.Navigation("Queue");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.MedicalLab", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.People.MedicalLabTester", "CurrentWorkingTester")
                        .WithOne()
                        .HasForeignKey("HSS.System.V2.Domain.Facilities.MedicalLab", "CurrentWorkingTesterId");

                    b.HasOne("HSS.System.V2.Domain.Facilities.Hospital", "Hospital")
                        .WithMany("MedicalLabs")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Queues.MedicalLabQueue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentWorkingTester");

                    b.Navigation("Hospital");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Pharmacy", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Hospital", "Hospital")
                        .WithMany("Pharmacies")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.RadiologyCenter", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.People.RadiologyTester", "CurrentWorkingTester")
                        .WithOne()
                        .HasForeignKey("HSS.System.V2.Domain.Facilities.RadiologyCenter", "CurrentWorkingTesterId");

                    b.HasOne("HSS.System.V2.Domain.Facilities.Hospital", "Hospital")
                        .WithMany("RadiologyCenters")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Queues.RadiologyCenterQueue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentWorkingTester");

                    b.Navigation("Hospital");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Reception", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Hospital", "Hospital")
                        .WithMany("Receptions")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.MedicinePharmacy", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Medical.Medicine", "Medicine")
                        .WithMany("MedicinePharmacies")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Facilities.Pharmacy", "Pharmacy")
                        .WithMany("MedicinesPharmacy")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.TestRequired", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "ClinicAppointment")
                        .WithMany("TestsRequired")
                        .HasForeignKey("ClinicAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.Test", "Test")
                        .WithMany("TestsRequired")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Employee", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Hospital", "Hospital")
                        .WithMany("Employees")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.Prescription", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "ClinicAppointment")
                        .WithMany()
                        .HasForeignKey("ClinicAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.PrescriptionMedicineItem", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Medical.Medicine", "Medicine")
                        .WithMany("Items")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Prescriptions.Prescription", "Prescription")
                        .WithMany("Items")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.Ticket", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "FirstClinicAppointment")
                        .WithOne()
                        .HasForeignKey("HSS.System.V2.Domain.Prescriptions.Ticket", "FirstClinicAppointmentId");

                    b.HasOne("HSS.System.V2.Domain.People.Patient", "Patient")
                        .WithMany("Tickets")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstClinicAppointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalLabMedicalLabTest", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.MedicalLab", null)
                        .WithMany()
                        .HasForeignKey("MedicalLabsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.MedicalLabTest", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadiologyCenterRadiologyTest", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.RadiologyCenter", null)
                        .WithMany()
                        .HasForeignKey("RadiologyCentersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.RadiologyTest", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.ClinicAppointment", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Clinic", "Clinic")
                        .WithMany("ClinicAppointments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.Disease", "Disease")
                        .WithMany("ClinicAppointments")
                        .HasForeignKey("DiseaseId");

                    b.HasOne("HSS.System.V2.Domain.People.Doctor", "Doctor")
                        .WithMany("ClinicAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "PreExamiationClinicAppointemnt")
                        .WithOne()
                        .HasForeignKey("HSS.System.V2.Domain.Appointments.ClinicAppointment", "PreExamiationClinicAppointemntId");

                    b.HasOne("HSS.System.V2.Domain.Prescriptions.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Queues.ClinicQueue", "Queue")
                        .WithMany("ClinicAppointments")
                        .HasForeignKey("QueueId");

                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "ReExamiationClinicAppointemnt")
                        .WithOne()
                        .HasForeignKey("HSS.System.V2.Domain.Appointments.ClinicAppointment", "ReExamiationClinicAppointemntId");

                    b.Navigation("Clinic");

                    b.Navigation("Disease");

                    b.Navigation("Doctor");

                    b.Navigation("PreExamiationClinicAppointemnt");

                    b.Navigation("Prescription");

                    b.Navigation("Queue");

                    b.Navigation("ReExamiationClinicAppointemnt");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.MedicalLabAppointment", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "ClinicAppointment")
                        .WithMany("MedicalLabAppointments")
                        .HasForeignKey("ClinicAppointmentId");

                    b.HasOne("HSS.System.V2.Domain.Facilities.MedicalLab", "MedicalLab")
                        .WithMany("MedicalLabAppointments")
                        .HasForeignKey("MedicalLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Queues.MedicalLabQueue", "Queue")
                        .WithMany("MedicalLabAppointments")
                        .HasForeignKey("QueueId");

                    b.HasOne("HSS.System.V2.Domain.Medical.MedicalLabTest", "Test")
                        .WithMany("MedicalLabAppointments")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.People.MedicalLabTester", "Tester")
                        .WithMany("MedicalLabAppointments")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");

                    b.Navigation("MedicalLab");

                    b.Navigation("Queue");

                    b.Navigation("Test");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.RadiologyCeneterAppointment", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Appointments.ClinicAppointment", "ClinicAppointment")
                        .WithMany("RadiologyCeneterAppointments")
                        .HasForeignKey("ClinicAppointmentId");

                    b.HasOne("HSS.System.V2.Domain.Queues.RadiologyCenterQueue", "Queue")
                        .WithMany("RadiologyCeneterAppointments")
                        .HasForeignKey("QueueId");

                    b.HasOne("HSS.System.V2.Domain.Facilities.RadiologyCenter", "RadiologyCeneter")
                        .WithMany()
                        .HasForeignKey("RadiologyCeneterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.RadiologyTest", "Test")
                        .WithMany("RadiologyCeneterAppointments")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.People.RadiologyTester", "Tester")
                        .WithMany("RadiologyCeneterAppointments")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");

                    b.Navigation("Queue");

                    b.Navigation("RadiologyCeneter");

                    b.Navigation("Test");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Doctor", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.System.V2.Domain.Medical.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.MedicalLabTester", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.MedicalLab", "MedicalLab")
                        .WithMany("MedicalLabTesters")
                        .HasForeignKey("MedicalLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalLab");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Pharmacist", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Pharmacy", "Pharmacy")
                        .WithMany("Pharmacists")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.RadiologyTester", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.RadiologyCenter", "RadiologyCenter")
                        .WithMany("RadiologyTesters")
                        .HasForeignKey("RadiologyCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RadiologyCenter");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Receptionist", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Reception", "Reception")
                        .WithMany("Receptionists")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.ClinicQueue", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.MedicalLabQueue", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.MedicalLab", "MedicalLab")
                        .WithMany()
                        .HasForeignKey("MedicalLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalLab");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.RadiologyCenterQueue", b =>
                {
                    b.HasOne("HSS.System.V2.Domain.Facilities.RadiologyCenter", "RadiologyCenter")
                        .WithMany()
                        .HasForeignKey("RadiologyCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RadiologyCenter");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Clinic", b =>
                {
                    b.Navigation("ClinicAppointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Hospital", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("Employees");

                    b.Navigation("MedicalLabs");

                    b.Navigation("Pharmacies");

                    b.Navigation("RadiologyCenters");

                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.MedicalLab", b =>
                {
                    b.Navigation("MedicalLabAppointments");

                    b.Navigation("MedicalLabTesters");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Pharmacy", b =>
                {
                    b.Navigation("MedicinesPharmacy");

                    b.Navigation("Pharmacists");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.RadiologyCenter", b =>
                {
                    b.Navigation("RadiologyTesters");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Facilities.Reception", b =>
                {
                    b.Navigation("Receptionists");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Disease", b =>
                {
                    b.Navigation("ClinicAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Medicine", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("MedicinePharmacies");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Specialization", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.Test", b =>
                {
                    b.Navigation("TestsRequired");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Patient", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.Prescription", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Prescriptions.Ticket", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.SystemQueue", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Appointments.ClinicAppointment", b =>
                {
                    b.Navigation("MedicalLabAppointments");

                    b.Navigation("RadiologyCeneterAppointments");

                    b.Navigation("TestsRequired");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.MedicalLabTest", b =>
                {
                    b.Navigation("MedicalLabAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Medical.RadiologyTest", b =>
                {
                    b.Navigation("RadiologyCeneterAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.Doctor", b =>
                {
                    b.Navigation("ClinicAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.MedicalLabTester", b =>
                {
                    b.Navigation("MedicalLabAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.People.RadiologyTester", b =>
                {
                    b.Navigation("RadiologyCeneterAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.ClinicQueue", b =>
                {
                    b.Navigation("ClinicAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.MedicalLabQueue", b =>
                {
                    b.Navigation("MedicalLabAppointments");
                });

            modelBuilder.Entity("HSS.System.V2.Domain.Queues.RadiologyCenterQueue", b =>
                {
                    b.Navigation("RadiologyCeneterAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
